// Code generated by protoc-gen-grpc-client. DO NOT EDIT.
package user

import (
	"sync"

	"github.com/995933447/microgosuit/grpcsuit"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

var (
	dialUserOpts                  []grpc.DialOption
	dialUserOptsMergedDefault     []grpc.DialOption
	dialUserOptsMergedDefaultOnce sync.Once
)

func RegisterDialUserOpts(opts ...grpc.DialOption) {
	dialUserOpts = append(dialUserOpts, opts...)
	dialUserOptsMergedDefault = nil
}

func GetDialUserOpts() []grpc.DialOption {
	dialUserOptsMergedDefaultOnce.Do(func() {
		globalDialOpts := grpcsuit.GetCustomizedOptsMergedDefault()
		dialUserOptsMergedDefault = make([]grpc.DialOption, 0, len(globalDialOpts)+len(dialUserOpts))
		dialUserOptsMergedDefault = append(append(dialUserOptsMergedDefault, globalDialOpts...), dialUserOpts...)
	})
	return dialUserOptsMergedDefault
}

var UserDefault = &User{}

func UserRpc() *User {
	return UserDefault
}

func NewUserRpc(dialOpts ...grpc.DialOption) *User {
	return &User{
		dialOpts: dialOpts,
	}
}

type User struct {
	c        UserClient
	conn     *grpc.ClientConn
	once     sync.Once
	mu       sync.RWMutex
	dialOpts []grpc.DialOption
}

func (s *User) Close() error {
	err := s.conn.Close()
	if err != nil {
		return err
	}
	return nil
}

func (s *User) prepareConn() error {
	var err error
	s.once.Do(func() {
		var conn *grpc.ClientConn
		opts := s.dialOpts
		if opts == nil {
			opts = GetDialUserOpts()
		}
		conn, err = grpc.NewClient("microgosuit:///user.User", opts...)
		if err != nil {
			return
		}
		s.conn = conn
		s.c = NewUserClient(conn)
	})
	if err != nil {
		return err
	}
	return nil
}

func (s *User) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	if err := s.prepareConn(); err != nil {
		return nil, err
	}

	return s.c.GetUser(ctx, in, opts...)
}

func (s *User) SetUser(ctx context.Context, in *SetUserReq, opts ...grpc.CallOption) (*SetUserResp, error) {
	if err := s.prepareConn(); err != nil {
		return nil, err
	}

	return s.c.SetUser(ctx, in, opts...)
}

func (s *User) GetUserOutputStream(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUserResp], error) {
	if err := s.prepareConn(); err != nil {
		return nil, err
	}
	return s.c.GetUserOutputStream(ctx, in, opts...)
}

func (s *User) GetUserInputStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GetUserReq, GetUserResp], error) {
	if err := s.prepareConn(); err != nil {
		return nil, err
	}
	return s.c.GetUserInputStream(ctx, opts...)
}

func (s *User) GetUserInOutStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetUserReq, GetUserResp], error) {
	if err := s.prepareConn(); err != nil {
		return nil, err
	}
	return s.c.GetUserInOutStream(ctx, opts...)
}

var (
	dialUserGatewayOpts                  []grpc.DialOption
	dialUserGatewayOptsMergedDefault     []grpc.DialOption
	dialUserGatewayOptsMergedDefaultOnce sync.Once
)

func RegisterDialUserGatewayOpts(opts ...grpc.DialOption) {
	dialUserGatewayOpts = append(dialUserGatewayOpts, opts...)
	dialUserGatewayOptsMergedDefault = nil
}

func GetDialUserGatewayOpts() []grpc.DialOption {
	dialUserGatewayOptsMergedDefaultOnce.Do(func() {
		globalDialOpts := grpcsuit.GetCustomizedOptsMergedDefault()
		dialUserGatewayOptsMergedDefault = make([]grpc.DialOption, 0, len(globalDialOpts)+len(dialUserGatewayOpts))
		dialUserGatewayOptsMergedDefault = append(append(dialUserGatewayOptsMergedDefault, globalDialOpts...), dialUserGatewayOpts...)
	})
	return dialUserGatewayOptsMergedDefault
}

var UserGatewayDefault = &UserGateway{}

func UserGatewayRpc() *UserGateway {
	return UserGatewayDefault
}

func NewUserGatewayRpc(dialOpts ...grpc.DialOption) *UserGateway {
	return &UserGateway{
		dialOpts: dialOpts,
	}
}

type UserGateway struct {
	c        UserGatewayClient
	conn     *grpc.ClientConn
	once     sync.Once
	mu       sync.RWMutex
	dialOpts []grpc.DialOption
}

func (s *UserGateway) Close() error {
	err := s.conn.Close()
	if err != nil {
		return err
	}
	return nil
}

func (s *UserGateway) prepareConn() error {
	var err error
	s.once.Do(func() {
		var conn *grpc.ClientConn
		opts := s.dialOpts
		if opts == nil {
			opts = GetDialUserGatewayOpts()
		}
		conn, err = grpc.NewClient("microgosuit:///user.UserGateway", opts...)
		if err != nil {
			return
		}
		s.conn = conn
		s.c = NewUserGatewayClient(conn)
	})
	if err != nil {
		return err
	}
	return nil
}

func (s *UserGateway) GetUserInfo(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	if err := s.prepareConn(); err != nil {
		return nil, err
	}

	return s.c.GetUserInfo(ctx, in, opts...)
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.2
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	User_GetUser_FullMethodName             = "/user.user/GetUser"
	User_SetUser_FullMethodName             = "/user.user/SetUser"
	User_GetUserOutputStream_FullMethodName = "/user.user/GetUserOutputStream"
	User_GetUserInputStream_FullMethodName  = "/user.user/GetUserInputStream"
	User_GetUserInOutStream_FullMethodName  = "/user.user/GetUserInOutStream"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
	SetUser(ctx context.Context, in *SetUserReq, opts ...grpc.CallOption) (*SetUserResp, error)
	GetUserOutputStream(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUserResp], error)
	GetUserInputStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GetUserReq, GetUserResp], error)
	GetUserInOutStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetUserReq, GetUserResp], error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResp)
	err := c.cc.Invoke(ctx, User_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetUser(ctx context.Context, in *SetUserReq, opts ...grpc.CallOption) (*SetUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserResp)
	err := c.cc.Invoke(ctx, User_SetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserOutputStream(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetUserResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[0], User_GetUserOutputStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetUserReq, GetUserResp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type User_GetUserOutputStreamClient = grpc.ServerStreamingClient[GetUserResp]

func (c *userClient) GetUserInputStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GetUserReq, GetUserResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[1], User_GetUserInputStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetUserReq, GetUserResp]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type User_GetUserInputStreamClient = grpc.ClientStreamingClient[GetUserReq, GetUserResp]

func (c *userClient) GetUserInOutStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetUserReq, GetUserResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[2], User_GetUserInOutStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetUserReq, GetUserResp]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type User_GetUserInOutStreamClient = grpc.BidiStreamingClient[GetUserReq, GetUserResp]

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility.
type UserServer interface {
	GetUser(context.Context, *GetUserReq) (*GetUserResp, error)
	SetUser(context.Context, *SetUserReq) (*SetUserResp, error)
	GetUserOutputStream(*GetUserReq, grpc.ServerStreamingServer[GetUserResp]) error
	GetUserInputStream(grpc.ClientStreamingServer[GetUserReq, GetUserResp]) error
	GetUserInOutStream(grpc.BidiStreamingServer[GetUserReq, GetUserResp]) error
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServer struct{}

func (UnimplementedUserServer) GetUser(context.Context, *GetUserReq) (*GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServer) SetUser(context.Context, *SetUserReq) (*SetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUser not implemented")
}
func (UnimplementedUserServer) GetUserOutputStream(*GetUserReq, grpc.ServerStreamingServer[GetUserResp]) error {
	return status.Errorf(codes.Unimplemented, "method GetUserOutputStream not implemented")
}
func (UnimplementedUserServer) GetUserInputStream(grpc.ClientStreamingServer[GetUserReq, GetUserResp]) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInputStream not implemented")
}
func (UnimplementedUserServer) GetUserInOutStream(grpc.BidiStreamingServer[GetUserReq, GetUserResp]) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInOutStream not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}
func (UnimplementedUserServer) testEmbeddedByValue()              {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	// If the following call pancis, it indicates UnimplementedUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetUser(ctx, req.(*SetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserOutputStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).GetUserOutputStream(m, &grpc.GenericServerStream[GetUserReq, GetUserResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type User_GetUserOutputStreamServer = grpc.ServerStreamingServer[GetUserResp]

func _User_GetUserInputStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).GetUserInputStream(&grpc.GenericServerStream[GetUserReq, GetUserResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type User_GetUserInputStreamServer = grpc.ClientStreamingServer[GetUserReq, GetUserResp]

func _User_GetUserInOutStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).GetUserInOutStream(&grpc.GenericServerStream[GetUserReq, GetUserResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type User_GetUserInOutStreamServer = grpc.BidiStreamingServer[GetUserReq, GetUserResp]

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _User_GetUser_Handler,
		},
		{
			MethodName: "SetUser",
			Handler:    _User_SetUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserOutputStream",
			Handler:       _User_GetUserOutputStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserInputStream",
			Handler:       _User_GetUserInputStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserInOutStream",
			Handler:       _User_GetUserInOutStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}

const (
	UserGateway_GetUserInfo_FullMethodName = "/user.UserGateway/GetUserInfo"
)

// UserGatewayClient is the client API for UserGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGatewayClient interface {
	GetUserInfo(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
}

type userGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGatewayClient(cc grpc.ClientConnInterface) UserGatewayClient {
	return &userGatewayClient{cc}
}

func (c *userGatewayClient) GetUserInfo(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResp)
	err := c.cc.Invoke(ctx, UserGateway_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGatewayServer is the server API for UserGateway service.
// All implementations must embed UnimplementedUserGatewayServer
// for forward compatibility.
type UserGatewayServer interface {
	GetUserInfo(context.Context, *GetUserReq) (*GetUserResp, error)
	mustEmbedUnimplementedUserGatewayServer()
}

// UnimplementedUserGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserGatewayServer struct{}

func (UnimplementedUserGatewayServer) GetUserInfo(context.Context, *GetUserReq) (*GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserGatewayServer) mustEmbedUnimplementedUserGatewayServer() {}
func (UnimplementedUserGatewayServer) testEmbeddedByValue()                     {}

// UnsafeUserGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGatewayServer will
// result in compilation errors.
type UnsafeUserGatewayServer interface {
	mustEmbedUnimplementedUserGatewayServer()
}

func RegisterUserGatewayServer(s grpc.ServiceRegistrar, srv UserGatewayServer) {
	// If the following call pancis, it indicates UnimplementedUserGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserGateway_ServiceDesc, srv)
}

func _UserGateway_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGatewayServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGateway_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGatewayServer).GetUserInfo(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGateway_ServiceDesc is the grpc.ServiceDesc for UserGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserGateway",
	HandlerType: (*UserGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _UserGateway_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
